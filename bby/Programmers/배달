class Solution {
    static final int INF = 500001;
    public int solution(int N, int[][] road, int K) {
        int answer = 0;

        // 각 도시로의 경로를 구하기 위해 2차원배열 : [마을의 개수][인접한 마을의 개수]
        // 비용이 싼 것을 우선순위로 한다는 것은 int[][] map의 수치가 낮아야함.
        // 계산 값이 크면 메모리가 많이 들어가기 때문에?
        int[][] map = new int[N + 1][N + 1];
        
        // 무한대로 초기화
        // i 에서 출발하여 인접한 마을을 가는데, 끝까지 다 돌고 값을 못 찾으면 = 길이 없는 의미
        // INF 를 설정하고 시작.
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                if(i==j) continue;
                map[i][j] = INF;
            }
        }

        // 간선 정보 저장 (이중 배열)
        for (int i = 0; i < road.length; i++) {
            int a = road[i][0];
            int b = road[i][1];
            int w = road[i][2];

            if (map[a][b] > w) {
                map[a][b] = w;
                map[b][a] = w;
            }
        }

        // 우선 한 마을에서 하나의 마을로 가는 것을 계산하여 저장
        int[] dist = new int[N + 1];
        for (int i = 2; i <= N; i++) {
            // dist[] 마을을 지나서 간 경로를 계산한게 0 이면 무한대로
            // 
            dist[i] = (dist[i]==0) ? INF : map[1][i];
        }

        // 방문한 마을인지 검사하고 지나기.
        boolean[] visited = new boolean[N + 1];
        visited[1] = true;

        for (int i = 1; i <= N - 1; i++) { // n-1번 반복

            // extract-min
            // dist 중에 방문하지 않았고 가장 작은 값을 가지는 인덱스를 찾는다.
            // 이전에 최대힙 했던 것을 최소값으로 값을 뽑는 우선순위 큐랑 비슷함.
            int min_idx = 1;
            int min_value = INF;
            for (int j = 2; j <= N; j++) {
                if (!visited[j] && dist[j] < min_value) {
                    min_value = dist[j];
                    min_idx = j;
                }
            }

            // 최소의 값을 가지는 인덱스 시간 값을 방문으로 체크
            visited[min_idx] = true;

            // 거쳐가는게 더 빠른지 확인하여 갱신하기
            for (int j = 2; j <= N; j++) {
                if (dist[j] > dist[min_idx] + map[min_idx][j]) {
                    dist[j] = dist[min_idx] + map[min_idx][j];
                }
            }
        }

        // 결과 카운트
        for (int i = 1; i <= N; i++) {
            System.out.println(dist[i]);
            if(dist[i]<=K) answer ++;
        }


        return answer;
    }
}
